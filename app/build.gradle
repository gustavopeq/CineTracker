plugins {
    alias(libs.plugins.agp)
    alias(libs.plugins.kotlin)
    alias(libs.plugins.ksp)
    alias(libs.plugins.kapt)
    alias(libs.plugins.navigation.safeargs)
    alias(libs.plugins.google.services)
    alias(libs.plugins.hilt)
    alias(libs.plugins.crashlytics)
    alias(libs.plugins.composePlugin)
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
}

def apiKey = localProperties['API_KEY'] ?: ""

android {
    namespace 'com.projects.moviemanager'
    defaultConfig {
        applicationId "gustavo.projects.restapi"
        minSdkVersion 21
        targetSdkVersion 35
        compileSdk 35
        versionCode 310
        versionName "3.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "API_KEY", apiKey)
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose = true
        buildConfig = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.2"
    }
}

dependencies {
    implementation(libs.kotlin.stdlib)

    //Retrofit
    implementation(libs.retrofit)

    //Moshi
    implementation(libs.moshi.kotlin)
    implementation(libs.moshi.converter)

    //Glide
    implementation(libs.glide.compose)

    //ViewModel KTX + Coroutine
    implementation(libs.lifecycle.viewmodel.ktx)

    //Lottie
    implementation(libs.lottie.compose)

    //Room
    implementation(libs.room.runtime)
    implementation(libs.room.ktx)
    ksp(libs.room.compiler)

    //Firebase
    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.crashlytics)
    implementation(libs.firebase.analytics.ktx)
    implementation(libs.firebase.messaging.ktx)

    //Timber
    implementation(libs.timber)

    /* Jetpack Compose */
    def composeBom = libs.compose.bom
    implementation(composeBom)

    // Material Design 3
    implementation(libs.material3)

    // Android Studio Preview support
    implementation(libs.ui.tooling.preview)

    // Jetpack Compose Navigation
    implementation libs.navigation.compose

    // Hilt
    implementation libs.hilt.android
    kapt libs.hilt.compiler
    implementation libs.hilt.navigation.compose

    // Paging 3
    implementation libs.paging.runtime.ktx
    implementation libs.paging.compose
}